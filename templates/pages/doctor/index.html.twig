{% extends 'states/doctor-dashboard.html.twig' %}

{% block body %}
  {% set days = {
    'Monday': 'Luni',
    'Tuesday': 'Marți',
    'Wednesday': 'Miercuri',
    'Thursday': 'Joi',
    'Friday': 'Vineri',
    'Saturday': 'Sâmbătă',
    'Sunday': 'Duminică'
  } %}


  <div class="grid gap-5 lg:gap-7.5">
    <div class="grid lg:grid-cols-3 gap-5 lg:gap-7.5 items-stretch">
      <div class="lg:col-span-2">
        <div class="grid">
          <div id="calendar"></div>
        </div>
      </div>
      <div class="lg:col-span-1">
        <div class="card h-full">
          <div class="card-header">
            <h3 class="card-title">Gestionați calendarul</h3>
          </div>
          <div class="card-group flex items-center justify-between py-4 gap-2.5">
            <div class="flex flex-col justify-center gap-1.5">
              <span class="leading-none font-medium text-sm text-gray-900">Creați o programare</span>
              <span class="text-2sm text-gray-700">Adăugați o nouă întâlnire completând detaliile esențiale pentru a vă organiza eficient agenda.</span>
            </div>
            <a href="{{ path('doctor_add_appointment') }}" class="btn btn-sm btn-light btn-outline">Creați</a>
          </div>
          <div class="card-group flex items-center justify-between py-4 gap-2.5">
            <div class="flex flex-col justify-center gap-1.5">
              <span class="leading-none font-medium text-sm text-gray-900">Configurați programul de lucru</span>
              <span class="text-2sm text-gray-700">Personalizați orele de funcționare pentru a organiza eficient activitățile zilnice.</span>
            </div>
            <button class="btn btn-sm btn-light btn-outline" data-modal-toggle="#config-slots">Configurați</button>
            <div class="modal" data-modal="true" id="config-slots">
              <div class="modal-content modal-center max-w-[600px] w-full">
                <div class="modal-header justify-end border-0 pt-5">
                  <button class="btn btn-sm btn-icon btn-light" data-modal-dismiss="true">
                    <i class="ki-filled ki-cross"></i>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="card">
                    <div class="card-header">
                      <h3 class="card-title">Configurați programul de lucru</h3>
                    </div>
                    <div class="card-body">
                      <div class="grid gap-5 mb-7">
                        {% for engDay, roDay in days %}
                          <div class="schedule-row flex items-center justify-between flex-wrap border border-gray-200 rounded-xl gap-2 px-3.5 py-2.5" data-day="{{ engDay }}">
                            <div class="flex items-center flex-wrap gap-3.5">
                              <div class="flex flex-col gap-px">
                                <a class="text-sm font-medium text-gray-900 hover:text-primary-active" href="#">{{ roDay }}</a>
                                <div class="flex mt-1 gap-2">
                                  <input autocomplete="off" class="input input-sm start-time" name="startTime" placeholder="De la" type="time" min="07:00" max="19:00"/>
                                  <span class="items-center justify-center px-2">—</span>
                                  <input autocomplete="off" class="input input-sm end-time" name="endTime" placeholder="Până la" type="time" min="07:00" max="19:00"/>
                                </div>
                              </div>
                            </div>
                            <div class="flex items-center gap-4 lg:gap-6">
                              <label class="switch switch-sm">
                                <input class="active-checkbox" type="checkbox" value="1"/>
                              </label>
                            </div>
                          </div>
                        {% endfor %}
                      </div>
                      <div class="w-full">
                        <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5 mb-7">
                          <label class="form-label max-w-56">Serviciul</label>
                          <div class="flex flex-col items-start grow gap-3 w-full">
                            <select id="service-select" class="select">
                              <option value="" disabled selected>Selectați un serviciu</option>
                              {% for service in services %}
                                <option
                                        value="{{ service.id }}"
                                        data-color="{{ service.color|default('#3788d8') }}"
                                        data-duration="{{ service.duration }}"
                                >
                                  {{ service.name }}
                                </option>
                              {% endfor %}
                            </select>
                          </div>
                        </div>
                      </div>
                      <div class="w-full">
                        <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5 mb-7">
                          <label class="form-label max-w-56">Repetă până la</label>
                          <div class="flex flex-col items-start grow gap-3 w-full">
                            <input id="input-repeat-slots" class="input" type="text" placeholder="23-02-2025">
                          </div>
                        </div>
                      </div>
                      <div class="w-full">
                        <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5 mb-7">
                          <label class="form-label max-w-56">Repetă pentru</label>
                          <div class="flex flex-col items-start grow gap-3 w-full">
                            <select id="repeat-week-type" class="select">
                              <option value="all">Toate săptămânile</option>
                              <option value="even">Săptămâni pare</option>
                              <option value="odd">Săptămâni impare</option>
                            </select>
                          </div>
                        </div>
                      </div>
                      <div class="flex justify-end pt-2.5">
                        <button class="btn btn-primary" id="save-schedule-btn">Salvează</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="card-group flex items-center justify-between py-4 gap-2.5">
            <div class="flex flex-col justify-center gap-1.5">
              <span class="leading-none font-medium text-sm text-gray-900">Blocați intervale de timp</span>
              <span class="text-2sm text-gray-700">Rezervați intervale specifice pentru întâlniri sau activități, prevenind suprapunerile.</span>
            </div>
            <button class="btn btn-sm btn-light btn-outline" data-modal-toggle="#block-slots">Blocați</button>
            <div class="modal" data-modal="true" id="block-slots">
              <div class="modal-content modal-center max-w-[600px] w-full">
                <div class="modal-header justify-end border-0 pt-5">
                  <button class="btn btn-sm btn-icon btn-light" data-modal-dismiss="true">
                    <i class="ki-filled ki-cross"></i>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="card">
                    <div class="card-header">
                      <h3 class="card-title">Blocați intervalele de timp</h3>
                    </div>
                    <div class="card-body">
                      <div class="grid gap-5 mb-7">
                        <div class="flex items-center justify-between flex-wrap border border-gray-200 rounded-xl gap-2 px-3.5 py-2.5">
                          <div class="flex flex-col gap-px w-full">
                            <label for="input-block-slots" class="mb-2">Interval (ex.: 2025-02-01 18:00 - 2025-03-01 18:00)</label>
                            <input id="input-block-slots" class="input w-100" type="text" placeholder="YYYY-MM-DD HH:mm - YYYY-MM-DD HH:mm">
                          </div>
                        </div>
                      </div>
                      <div class="flex justify-end pt-2.5">
                        <button class="btn btn-primary" id="save-block-btn">Salvează</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="card-group flex items-center justify-between py-4 gap-2.5">
            <div class="flex flex-col justify-center gap-1.5">
              <span class="leading-none font-medium text-sm text-gray-900">Stergeți intervale de timp</span>
              <span class="text-2sm text-gray-700">Stergeți intervale specifice setate anterior.</span>
            </div>
            <button class="btn btn-sm btn-light btn-outline" data-modal-toggle="#remove-slots">Stergeți</button>
            <div class="modal" data-modal="true" id="remove-slots">
              <div class="modal-content modal-center max-w-[600px] w-full">
                <div class="modal-header justify-end border-0 pt-5">
                  <button class="btn btn-sm btn-icon btn-light" data-modal-dismiss="true">
                    <i class="ki-filled ki-cross"></i>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="card">
                    <div class="card-header">
                      <h3 class="card-title">Stergeți intervalele de timp</h3>
                    </div>
                    <div class="card-body">
                      <div class="grid gap-5 mb-7">
                        <div class="flex items-center justify-between flex-wrap border border-gray-200 rounded-xl gap-2 px-3.5 py-2.5">
                          <div class="flex flex-col gap-px w-full">
                            <label for="input-remove-slots" class="mb-2">Interval (ex.: 2025-02-01 18:00 - 2025-03-01 18:00)</label>
                            <input id="input-remove-slots" class="input w-100" type="text" placeholder="YYYY-MM-DD HH:mm - YYYY-MM-DD HH:mm">
                          </div>
                        </div>
                      </div>
                      <div class="flex justify-end pt-2.5">
                        <button class="btn btn-primary" id="save-remove-btn">Salvează</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="card-group flex items-center justify-between py-4 gap-2.5">
            <div class="flex flex-col justify-center gap-1.5">
              <span class="leading-none font-medium text-sm text-gray-900">Printați programările de astăzi</span>
              <span class="text-2sm text-gray-700">Generați rapid o listă imprimabilă cu întâlnirile și evenimentele programate pentru ziua curentă.</span>
            </div>
            <a href="{{ path('doctor_appointments_today_pdf') }}" class="btn btn-sm btn-light btn-outline" target="_blank">Descărcați</a>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="{{ asset('theme/vendors/fullcalendar/dist/index.global.js') }}"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var calendarEl = document.getElementById('calendar');
      const appointments = {{ appointments|default('[]')|raw }};
      const doctorSchedules = {{ doctorSchedules|default('[]')|raw }};
      const services = {{ services|json_encode()|raw }}; // Make sure to pass services to the template

      // Create a map of service colors by ID for quick lookup
      const serviceColors = {};
      services.forEach(service => {
        serviceColors[service.id] = service.color || '#3788d8';
      });

      // Instead of using businessHours (which only takes one color),
      // we'll create background events for each slot with the appropriate service color
      var businessHourEvents = [];
      var earliestStart = "23:59:59";
      var latestEnd = "00:00:00";

      doctorSchedules.forEach(schedule => {
        var scheduleDate = new Date(schedule.date);
        var day = scheduleDate.getDay();
        day = (day === 0) ? 7 : day;

        schedule.slots.forEach(slot => {
          if (!slot.isBooked) {
            if (slot.startTime < earliestStart) {
              earliestStart = slot.startTime;
            }
            if (slot.endTime > latestEnd) {
              latestEnd = slot.endTime;
            }

            // Get the service color for this slot
            const serviceColor = slot.serviceId && serviceColors[slot.serviceId]
                    ? serviceColors[slot.serviceId]
                    : '#3788d8';

            // Create a recurring business hours event for this slot with the service color
            businessHourEvents.push({
              daysOfWeek: [day],
              startTime: slot.startTime,
              endTime: slot.endTime,
              display: 'background',
              backgroundColor: serviceColor,
              // Make these non-interactive
              interactive: false,
              // Add a custom property to identify these as business hours
              businessHour: true
            });
          }
        });
      });

      if (earliestStart === "23:59:59") earliestStart = "07:00:00";
      if (latestEnd === "00:00:00") latestEnd = "19:00:00";

      const earliestHour = earliestStart.split(':')[0];
      const earliestMinute = earliestStart.split(':')[1];
      let bufferStartTime = earliestStart;

      if (earliestMinute >= "30") {
        const adjustedMinutes = parseInt(earliestMinute) - 30;
        bufferStartTime = `${earliestHour}:${adjustedMinutes.toString().padStart(2, '0')}:00`;
      } else if (earliestHour > "00") {
        const newHour = parseInt(earliestHour) - 1;
        const newMinute = parseInt(earliestMinute) + 30;
        bufferStartTime = `${newHour.toString().padStart(2, '0')}:${newMinute.toString().padStart(2, '0')}:00`;
      }

      var blockedEvents = [];
      doctorSchedules.forEach(schedule => {
        schedule.slots.forEach(slot => {
          if (slot.isBooked) {
            blockedEvents.push({
              start: schedule.date + 'T' + slot.startTime,
              end: schedule.date + 'T' + slot.endTime,
              display: 'background',
              backgroundColor: '#FF0000'
            });
          }
        });
      });

      // Combine all events: appointments, blocked slots, and business hour events
      var allEvents = [...appointments, ...blockedEvents, ...businessHourEvents];

      var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'timeGridWeek',
        allDaySlot: false,
        headerToolbar: {left: 'prev,next', center: 'title', right: ''},
        locale: 'ro',
        slotDuration: '00:30:00',
        slotMinTime: bufferStartTime,
        slotMaxTime: '23:59:59',
        snapDuration: '00:30:00',
        slotLabelInterval: '00:30',
        slotLabelFormat: {hour: '2-digit', minute: '2-digit', hour12: false},
        // Remove the businessHours property since we're using events with display: 'background'
        events: allEvents,
        eventContent: function (arg) {
          // Only show content for actual appointments, not background events
          if (arg.event.display !== 'background') {
            return {
              html: '<div class="fc-event-title">' + arg.event.title + '</div>'
            };
          }
          return null;
        },
        eventClick: function (info) {
          // Only navigate to appointment edit for actual appointments, not background events
          if (info.event.display !== "background") {
            window.location.href = '/doctor/appointments/' + info.event.id + '/edit';
          }
        },
        dateClick: function (info) {
          window.location.href = '{{ path("doctor_add_appointment") }}?date=' + encodeURIComponent(info.dateStr);
        }
      });
      calendar.render();

      flatpickr('#input-repeat-slots', {
        dateFormat: "d-m-Y",
        allowInput: true
      });
      flatpickr('#input-block-slots', {
        mode: "range",
        enableTime: true,
        dateFormat: "d-m-Y H:i",
        time_24hr: true,
        minuteIncrement: 30,
        locale: {
          rangeSeparator: ' - '
        }
      });

      flatpickr('#input-remove-slots', {
        mode: "range",
        enableTime: true,
        dateFormat: "d-m-Y H:i",
        time_24hr: true,
        minuteIncrement: 30,
        locale: {
          rangeSeparator: ' - '
        }
      });

      const saveScheduleBtn = document.getElementById('save-schedule-btn');
      if (saveScheduleBtn) {
        saveScheduleBtn.addEventListener('click', async function () {
          let schedules = {};
          document.querySelectorAll('.schedule-row').forEach(function (row) {
            const day = row.getAttribute('data-day');
            const active = row.querySelector('.active-checkbox').checked;
            const start = row.querySelector('.start-time').value;
            const end = row.querySelector('.end-time').value;
            schedules[day] = {active: active, start: start, end: end};
          });
          const repeatUntil = document.getElementById('input-repeat-slots').value;
          const repeatWeekType = document.getElementById('repeat-week-type').value;
          const serviceId = document.getElementById('service-select').value;
          const payload = {
            repeatUntil: repeatUntil,
            schedules: schedules,
            repeatWeekType: repeatWeekType,
            serviceId: serviceId
          };

          try {
            const response = await fetch('{{ path("doctor_configure_schedule") }}', {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(payload)
            });
            const result = await response.json();
            if (result.success) {
              window.location.reload();
            } else {
              alert(result.message || 'A apărut o eroare la salvarea programului');
            }
          } catch (error) {
            console.error(error);
            alert('A apărut o eroare la salvarea programului');
          }
        });
      }

      const saveBlockBtn = document.getElementById('save-block-btn');
      if (saveBlockBtn) {
        saveBlockBtn.addEventListener('click', async function () {
          const blockSlotsInput = document.getElementById('input-block-slots').value;

          if (!blockSlotsInput) {
            alert('Introduceți intervalul de timp pentru blocare');
            return;
          }

          const dateRangeArray = blockSlotsInput.split(' - ');
          if (dateRangeArray.length !== 2) {
            alert('Format interval invalid. Folosiți formatul corect');
            return;
          }

          const payload = {
            start: dateRangeArray[0],
            end: dateRangeArray[1]
          };

          try {
            const response = await fetch('{{ path("doctor_block_slots") }}', {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.success) {
              window.location.reload();
            } else {
              alert(result.message || 'A apărut o eroare la blocarea intervalelor');
            }
          } catch (error) {
            console.error(error);
            alert('A apărut o eroare la blocarea intervalelor');
          }
        });
      }

      const saveRemoveBtn = document.getElementById('save-remove-btn');
      if (saveRemoveBtn) {
        saveRemoveBtn.addEventListener('click', async function () {
          const removeSlotsInput = document.getElementById('input-remove-slots').value;

          if (!removeSlotsInput) {
            alert('Introduceți intervalul de timp pentru ștergere');
            return;
          }

          const dateRangeArray = removeSlotsInput.split(' - ');
          if (dateRangeArray.length !== 2) {
            alert('Format interval invalid. Folosiți formatul corect');
            return;
          }

          const payload = {
            start: dateRangeArray[0],
            end: dateRangeArray[1]
          };

          try {
            const response = await fetch('{{ path("doctor_remove_slots") }}', {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.success) {
              window.location.reload();
            } else {
              alert(result.message || 'A apărut o eroare la ștergerea intervalelor');
            }
          } catch (error) {
            console.error(error);
            alert('A apărut o eroare la ștergerea intervalelor');
          }
        });
      }
    });

  </script>
{% endblock %}
