{% extends 'states/doctor-dashboard.html.twig' %}

{% block body %}
    <div class="grid gap-5 lg:gap-7.5">
        <div class="grid lg:grid-cols-3 gap-5 lg:gap-7.5 items-stretch">
            <div class="lg:col-span-2">
                <div class="grid">
                    <div id="calendar"></div>
                </div>
            </div>
            <div class="lg:col-span-1">
                <div class="card h-full">
                    <div class="card-header">
                        <h3 class="card-title">Adaugă programare</h3>
                    </div>
                    <div class="card-body">
                        {{ form_start(form) }}
                        {{ form_errors(form) }}
                        <label class="form-label font-normal text-gray-900">Specialitate</label>
                        {{ form_widget(form.specialty, {'attr': {'class': 'select'}}) }}

                        <label class="form-label font-normal text-gray-900">Serviciu</label>
                        {{ form_widget(form.service, {'attr': {'class': 'select'}}) }}

                        <label class="form-label font-normal text-gray-900">Data și ora de start a programării</label>
                        {{ form_widget(form.appointmentStart, {'attr': {'class': 'flatpickr-datetime input'}}) }}

                        <label class="form-label font-normal text-gray-900">Prenume</label>
                        {{ form_widget(form.firstName, {'attr': {'class': 'input'}}) }}

                        <label class="form-label font-normal text-gray-900">Nume</label>
                        {{ form_widget(form.lastName, {'attr': {'class': 'input'}}) }}

                        <label class="form-label font-normal text-gray-900">Email</label>
                        {{ form_widget(form.email, {'attr': {'class': 'input'}}) }}

                        <label class="form-label font-normal text-gray-900">Telefon</label>
                        {{ form_widget(form.phone, {'attr': {'class': 'input'}}) }}

                        <label class="form-label font-normal text-gray-900">CNP</label>
                        {{ form_widget(form.cnp, {'attr': {'class': 'input'}}) }}

                        {{ form_widget(form) }}
                        <button class="btn btn-primary mt-2">Creați</button>
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('theme/vendors/fullcalendar/dist/index.global.js') }}"></script>
    <script src="{{ asset('theme/vendors/datepicker/dist/datepicker.js') }}"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');
        const appointments = {{ appointments|default('[]')|raw }};
        const doctorSchedules = {{ doctorSchedules|default('[]')|raw }};
        const services = {{ services|json_encode()|raw }}; // Make sure to pass services to the template

// Create a map of service colors by ID for quick lookup
        const serviceColors = {};
        services.forEach(service => {
          serviceColors[service.id] = service.color || '#3788d8';
        });

// Instead of using businessHours (which only takes one color),
// we'll create background events for each slot with the appropriate service color
        var businessHourEvents = [];
        var earliestStart = "23:59:59";
        var latestEnd = "00:00:00";

        doctorSchedules.forEach(schedule => {
          var scheduleDate = new Date(schedule.date);

          schedule.slots.forEach(slot => {
            if (!slot.isBooked) {
              if (slot.startTime < earliestStart) {
                earliestStart = slot.startTime;
              }
              if (slot.endTime > latestEnd) {
                latestEnd = slot.endTime;
              }

              // Get the service color for this slot
              const serviceColor = slot.serviceId && serviceColors[slot.serviceId]
                      ? serviceColors[slot.serviceId]
                      : '#3788d8';

              // Create a business hours event for this specific date with the service color
              businessHourEvents.push({
                // Use the specific date instead of daysOfWeek
                start: schedule.date + 'T' + slot.startTime,
                end: schedule.date + 'T' + slot.endTime,
                display: 'background',
                backgroundColor: serviceColor,
                // Make these non-interactive
                interactive: false,
                // Add a custom property to identify these as business hours
                businessHour: true
              });
            }
          });
        });

        if (earliestStart === "23:59:59") earliestStart = "07:00:00";
        if (latestEnd === "00:00:00") latestEnd = "19:00:00";

        const earliestHour = earliestStart.split(':')[0];
        const earliestMinute = earliestStart.split(':')[1];
        let bufferStartTime = earliestStart;

        if (earliestMinute >= "30") {
          const adjustedMinutes = parseInt(earliestMinute) - 30;
          bufferStartTime = `${earliestHour}:${adjustedMinutes.toString().padStart(2, '0')}:00`;
        } else if (earliestHour > "00") {
          const newHour = parseInt(earliestHour) - 1;
          const newMinute = parseInt(earliestMinute) + 30;
          bufferStartTime = `${newHour.toString().padStart(2, '0')}:${newMinute.toString().padStart(2, '0')}:00`;
        }

        var blockedEvents = [];
        doctorSchedules.forEach(schedule => {
          schedule.slots.forEach(slot => {
            if (slot.isBooked) {
              blockedEvents.push({
                start: schedule.date + 'T' + slot.startTime,
                end: schedule.date + 'T' + slot.endTime,
                display: 'background',
                backgroundColor: '#FF0000'
              });
            }
          });
        });

// Combine all events: appointments, blocked slots, and business hour events
        var allEvents = [...appointments, ...blockedEvents, ...businessHourEvents];

        var calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: 'timeGridWeek',
          allDaySlot: false,
          headerToolbar: {left: 'prev,next', center: 'title', right: ''},
          locale: 'ro',
          slotDuration: '00:30:00',
          slotMinTime: bufferStartTime,
          slotMaxTime: '23:59:59',
          snapDuration: '00:30:00',
          slotLabelInterval: '00:30',
          slotLabelFormat: {hour: '2-digit', minute: '2-digit', hour12: false},
          // Remove the businessHours property since we're using events with display: 'background'
          events: allEvents,
          eventContent: function (arg) {
            // Only show content for actual appointments, not background events
            if (arg.event.display !== 'background') {
              return {
                html: '<div class="fc-event-title">' + arg.event.title + '</div>'
              };
            }
            return null;
          },
          eventClick: function (info) {
            // Only navigate to appointment edit for actual appointments, not background events
            if (info.event.display !== "background") {
              window.location.href = '/doctor/appointments/' + info.event.id + '/edit';
            }
          },
          dateClick: function (info) {
            window.location.href = '{{ path("doctor_add_appointment") }}?date=' + encodeURIComponent(info.dateStr);
          }
        });
        calendar.render();

        flatpickr('#input-repeat-slots', {
          dateFormat: "d-m-Y",
          allowInput: true
        });
        flatpickr('#input-block-slots', {
          mode: "range",
          enableTime: true,
          dateFormat: "d-m-Y H:i",
          time_24hr: true,
          minuteIncrement: 30
        });

        const saveScheduleBtn = document.getElementById('save-schedule-btn');
        if(saveScheduleBtn) {
          saveScheduleBtn.addEventListener('click', async function() {
            let schedules = {};
            document.querySelectorAll('.schedule-row').forEach(function(row) {
              const day = row.getAttribute('data-day');
              const active = row.querySelector('.active-checkbox').checked;
              const start = row.querySelector('.start-time').value;
              const end = row.querySelector('.end-time').value;
              schedules[day] = { active: active, start: start, end: end };
            });
            const repeatUntil = document.getElementById('input-repeat-slots').value;
            const payload = { repeatUntil: repeatUntil, schedules: schedules };

            try {
              const response = await fetch('{{ path("doctor_configure_schedule") }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
              });
              await response.json();
              window.location.reload()
            } catch (error) {
              console.error(error);
            }
          });
        }

        const saveBlockBtn = document.getElementById('save-block-btn');
        if(saveBlockBtn) {
          saveBlockBtn.addEventListener('click', async function() {
            const rangeValue = document.getElementById('input-block-slots').value;
            const parts = rangeValue.split(' - ');
            if(parts.length !== 2) {
              alert('Formatul intervalului este invalid.');
              return;
            }
            const payload = { start: parts[0], end: parts[1] };

            try {
              const response = await fetch('{{ path("doctor_block_slots") }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
              });
              const result = await response.json();
              alert(result.message);
            } catch (error) {
              console.error(error);
            }
          });
        }
      });
    </script>
{% endblock %}