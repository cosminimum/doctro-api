{% extends 'states/doctor-dashboard.html.twig' %}

{% block body %}
    <div class="flex mt-5">
        <div class="card card-grid h-full min-w-full">
            <div class="card-header">
                <h3 class="card-title">Programări</h3>
                <div class="flex gap-2">
                    <div class="input input-sm max-w-48">
                        <i class="ki-filled ki-magnifier"></i>
                        <input autocomplete="off" placeholder="Caută programari" type="text" data-datatable-search="#appointments_table"/>
                    </div>
                    <div>
                        <a href="#" class="btn btn-sm btn-light export-excel" data-table-id="appointments_table" data-file-name="programari">Descarcă</a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div data-datatable="true" data-datatable-page-size="5" id="appointments_table">
                    <div class="scrollable-x-auto">
                        <table class="table table-border" data-datatable-table="true">
                            <thead>
                            <tr>
                                <th class="min-w-[280px]">
                                        <span class="sort asc">
                                            <span class="sort-label">Medic</span>
                                            <span class="sort-icon"></span>
                                        </span>
                                </th>
                                <th class="min-w-[135px]">
                                        <span class="sort">
                                            <span class="sort-label">Pacient</span>
                                            <span class="sort-icon"></span>
                                        </span>
                                </th>
                                <th class="min-w-[135px]">
                                        <span class="sort">
                                            <span class="sort-label">Status</span>
                                            <span class="sort-icon"></span>
                                        </span>
                                </th>
                                <th class="min-w-[135px]">
                                        <span class="sort">
                                            <span class="sort-label">Dată</span>
                                            <span class="sort-icon"></span>
                                        </span>
                                </th>
                                <th></th>
                            </tr>
                            </thead>
                            <tbody>
                            {% for appointment in appointments %}
                                <tr>
                                    <td>
                                        <div class="flex flex-col gap-2">
                                            <span class="leading-none font-medium text-sm text-gray-900 hover:text-primary">Dr. {{ appointment.doctor.firstName }} {{ appointment.doctor.lastName }}</span>
                                            <span class="text-2sm text-gray-700 font-normal leading-3">{{ appointment.medicalSpecialty.name }} | {{ appointment.hospitalService.name }}</span>
                                        </div>
                                    </td>
                                    <td>{{ appointment.patient.firstName }} {{ appointment.patient.lastName }}</td>
                                    <td>
                                        {% if appointment.isActive %}
                                            <span class="badge badge-xs badge-outline badge-success text-2xs -mr-2.5">Activ</span>
                                        {% else %}
                                            <span class="badge badge-xs badge-outline badge-warning text-2xs -mr-2.5">Inactiv</span>
                                        {% endif %}
                                    </td>
                                    <td>{{ appointment.timeSlot.schedule.date|date('d-m-Y') }} {{ appointment.timeSlot.startTime|date('H:i') }}</td>
                                    <td>
                                        <a class="btn btn-sm btn-icon btn-clear btn-light" href="{{ path('doctor_edit_appointment', {id: appointment.id}) }}">
                                            <i class="ki-filled ki-notepad-edit"></i>
                                        </a>
                                        <a class="btn btn-sm btn-icon btn-clear btn-light" href="{{ path('doctor_approve_appointment', {id: appointment.id}) }}">
                                            <i class="ki-filled ki-check"></i>
                                        </a>
                                        <a class="btn btn-sm btn-icon btn-clear btn-light" href="{{ path('app_appointment_pdf', {id: appointment.id}) }}">
                                            <i class="ki-filled ki-eye"></i>
                                        </a>
                                    </td>
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer justify-center md:justify-between flex-col md:flex-row gap-5 text-gray-600 text-2sm font-medium">
                        <div class="flex items-center gap-2 order-2 md:order-1">
                            Arată
                            <select class="select select-sm w-16" data-datatable-size="true" name="perpage"></select>
                            pe pagină
                        </div>
                        <div class="flex items-center gap-4 order-1 md:order-2">
                            <span data-datatable-info="true"></span>
                            <div class="pagination" data-datatable-pagination="true"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const datatableEl = document.querySelector('#appointments_table');
        const datatable = new KTDataTable(datatableEl, {
          pageSize: 5,
          stateSave: true
        });
        
        // Handle Excel export functionality
        const exportButtons = document.querySelectorAll('.export-excel');
        exportButtons.forEach(button => {
          button.addEventListener('click', function(e) {
            e.preventDefault();
            const tableId = this.getAttribute('data-table-id');
            const fileName = this.getAttribute('data-file-name') || 'export';
            const tableContainer = document.getElementById(tableId);
            
            if (tableContainer) {
              const table = tableContainer.querySelector('table');
              if (table) {
                exportTableToExcel(table, fileName);
              } else {
                alert('Tabelul nu a fost găsit');
              }
            } else {
              alert('Tabelul nu a fost găsit');
            }
          });
        });
        
        // Export table data to Excel
        function exportTableToExcel(table, fileName = 'export') {
          // Create a worksheet
          let xlsx = '';
          const headers = [];
          
          // Get headers
          const headerRow = table.querySelector('thead tr');
          if (headerRow) {
            headerRow.querySelectorAll('th').forEach(th => {
              // Get the text content from the sort-label if it exists, otherwise use the th's text
              const sortLabel = th.querySelector('.sort-label');
              const headerText = sortLabel ? sortLabel.textContent.trim() : th.textContent.trim();
              headers.push(headerText);
            });
          }
          
          // Add headers to Excel data
          xlsx += headers.join('\t') + '\n';
          
          // Get table data
          const rows = table.querySelectorAll('tbody tr');
          rows.forEach(row => {
            const rowData = [];
            row.querySelectorAll('td').forEach(cell => {
              // Clean the text to remove HTML and excess whitespace
              let cellText = cell.textContent.replace(/\s+/g, ' ').trim();
              // Escape special characters for TSV
              cellText = cellText.replace(/\t/g, ' ').replace(/\n/g, ' ');
              rowData.push(cellText);
            });
            xlsx += rowData.join('\t') + '\n';
          });
          
          // Create a download link
          const blob = new Blob([xlsx], { type: 'application/vnd.ms-excel' });
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = `${fileName}.xls`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        }
      });
    </script>
{% endblock %}
